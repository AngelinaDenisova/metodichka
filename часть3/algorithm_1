#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
bool compare1(pair<int, int> x)
{
return x.second < 0;
}
bool campare2(pair<int, int> point, int x1, int x2, int y1, int y2)
{
return (point.first == x1 && point.second >= y1 && point.second <= y2)  
(point.second == y1 && point.first >= x1 && point.first <= x2);
}
int main()
{
setlocale(LC_ALL, "Rus");
vector <pair<int, int>> Point;
int n, x, y, count = 0;
cin >> n;
for (int i = 0; i < n; i++)
{
cin >> x >> y;
if (y < 0)
count++;
Point.push_back(make_pair(x, y));
}
//a
if (count > 0) {
Point.erase(remove_if(Point.begin(), Point.end(), compare1));
cout << "После удаления точек, лежищих в нижней половине системы 
координат:" << endl;
for (unsigned int i = 0; i < Point.size(); i++)
{
cout << Point[i].first << ' ' << Point[i].second << endl;
}
}
else
cout << "Все точки лежат выше прямой X" << endl;
//б
cout << "Введите координаты прямой" << endl;
int x1, x2, y1, y2;
cin >> x1 >> y1 >> x2 >> y2;
cout << "Количество точек, лежащих на прямой = " << count_if(Point.begin(), 
Point.end(), [&](const pair<int, int>& p)
{
return (p.first == x1 && p.second >= y1 && p.second <= y2)  
(p.second == y1 && p.first >= x1 && p.first <= x2);
});;
//в
cout << endl;
auto result = find_if(Point.rbegin(), Point.rend(), [&](const pair<int, int>& p2)
{
40
return p2.first * p2.first + p2.second * p2.second >= 100;
});
if (result == Point.rend())
cout << "Точки не найдены" << endl;
else
{
for (auto p2 : Point)
{
if (p2 == *result)
cout << "Последняя точка, удаленная от начала координат не 
менее чем на 10: " << p2.first << ' ' << p2.second;
}
}
//г
cout << endl;
vector<int> sum;
for (auto p3 : Point)
{
sum.push_back(p3.first + p3.second);
}
stable_sort(sum.begin(), sum.end());
cout << "Суммы координат в порядке возрастания: ";
for (auto a : sum)
{
cout << a << ' ';
}
}
