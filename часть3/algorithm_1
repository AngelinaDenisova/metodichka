#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;
bool compare(pair<int, int> a, pair<int, int> b) {
    return (a.first + a.second) < (b.first + b.second); // функция сравнения для сортировки в порядке возрастания суммы координат
}
int main() {
    setlocale(LC_ALL, "Russian");
    vector<pair<int, int>> points; // вектор для хранения точек
    int n;
    cout << "Введите количество точек: ";
    cin >> n;
    for (int i = 0; i < n; i++) {
        int x, y;
        cin >> x >> y;
        points.push_back(make_pair(x, y));
    }
    //a
    vector<pair<int, int>> newPoints; // вектор для хранения новых точек
    for (int i = 0; i < n; i++) {
        if (points[i].second > 0) { // если точка не лежит в нижней половине системы координат
            newPoints.push_back(points[i]); // добавляем точку в новый вектор
        }
    }
    cout << "Новые координаты точек:" << endl;
    for (int i = 0; i < newPoints.size(); i++) {
        cout << newPoints[i].first << " " << newPoints[i].second << endl;
    }
    //b
    int count = 0; // количество точек, лежащих на одной вертикальной или горизонтальной прямой с данной
    int x, y;
    cout << "Введите координаты точки: ";
    cin >> x >> y;
    for (int i = 0; i < n; i++) {
        if (points[i].first == x || points[i].second == y) { // если точка лежит на одной вертикальной или горизонтальной прямой с данной
            count++;
        }
    }
    cout << "Количество точек, лежащих на одной вертикальной или горизонтальной прямой с данной: " << count << endl;
    //в)
    int lastPointIndex = -1; // индекс последней точки, удалённой от начала координат не менее чем на 10
    for (int i = 0; i < n; i++) {
        double distance = sqrt(pow(points[i].first, 2) + pow(points[i].second, 2)); // вычисляем расстояние от точки до начала координат
        if (distance >= 10) { // если точка удалена от начала координат не менее чем на 10
            lastPointIndex = i; // запоминаем индекс этой точки
        }
    }
    if (lastPointIndex == -1) { // если такой точки нет
        cout << "Точки, удалённой от начала координат не менее чем на 10, нет" << endl;
    } else {
        cout << "Последняя точка, удалённая от начала координат не менее чем на 10: " << points[lastPointIndex].first << " " << points[lastPointIndex].second << endl;
    }
    //г)
    sort(points.begin(), points.end(), compare); // сортируем точки в порядке возрастания суммы координат
    cout << "Отсортированные координаты точек:" << endl;
    for (int i = 0; i < n; i++) {
        cout << points[i].first << " " << points[i].second << endl;
    }
    return 0;
}
