 Создать класс для работы со строками. Разработать следующие члены класса: поле string line, функции, позволяющие посчитать количество цифр
в строке, вывести на экран все символы в строке, встречающиеся в ней только 1 раз, вывести на экран самую длинную последовательность повторяющихся символов в строке,
узнать общее количество символов в строке, сравнить 2 строки на равенство.  Кроме того, реализовать перегрузку операции унарный !, которая возвращает значение True, 
если строка не пустая, иначе False, операцию +, которая позволяет реализовать операцию слияния двух строк
#include <iostream>
#include <string>
#include <fstream>
using namespace std;
class String {
private:
    string line;
public:
    String(string s = "") { //конструктор класса принимает строку s и 
        line = s;           // инициализирует поле line этой строкой
    }

    int countDigits() {  //подсчитывает количество цифр в строке
    int count = 0;
        for (int i = 0; i < line.length(); i++) {
            if (isdigit(line[i])) { // если символ - цифра, увеличиваем счетчик
                count++;
            }
        }
        return count;
    }

    void printUniqueChars() { //выводит на экран все символы в строке, встречающиеся в ней только 1 раз. 
        string uniqueChars = "";
        for (int i = 0; i < line.length(); i++) {
            char c = line[i];
            if (line.find(c) == line.rfind(c)) {
                uniqueChars += " ";
                uniqueChars += c;
            }
        }
        cout << uniqueChars << endl;
    }

    void printLongestSequence() { // выводит на экран самую длинную последовательность повторяющихся символов в строке
        int maxLength = 0, currentLength = 1; //максимальная и текущая длина последовательности
		char maxChar = line[0], currentChar = line[0]; //символ с максимальной длиной и текущий символ
		for (int i = 1; i < line.length(); i++) {
			if (line[i] == line[i - 1]) {
				currentLength++;
				currentChar = line[i];
			}
			else {
				if (currentLength > maxLength) {
					maxLength = currentLength;
					maxChar = currentChar;
				}
				currentLength = 1;
			}
		}
		if (currentLength > maxLength) {
			maxLength = currentLength;
			maxChar = currentChar;
		}
		for (int i = 0; i < maxLength; i++) {
			cout << maxChar;
		}
		cout << endl;
    }

    int length() { //возвращает длину строки
        return line.length();
    }

    bool isEqual(String s) { //Сравнивает строки на равенство. Возвращает true, если строки равны, и false в противном случае. 
        return line == s.line;
    }

    bool operator! () { // Перегруженный оператор ! возвращает значение true, если строка не пустая, и false в противном случае. 
        return !line.empty();
    }

    String operator+ (String s) { //Перегруженный оператор + позволяет объединить две строки. Возвращает новый объект String, содержащий объединение строк. 
        return String(line + s.line);
    }
};
int main(){
    setlocale(LC_ALL, "Russian");
    string s1, s2;
    getline(cin, s1);
    getline(cin, s2);
    String str1(s1);
    String str2(s2);
    cout << "Количество цифр в строке 1: " << str1.countDigits() << endl;
    cout << "Количество цифр в строке 2: " << str2.countDigits() << endl;
    cout << "Уникальные символы в строке 1: ";
    str1.printUniqueChars();
    cout << "Уникальные символы в строке 2: ";
    str2.printUniqueChars();
    cout << "Максимальная посл-ть повторяющихся символов 1: ";
    str1.printLongestSequence();
    cout << "Максимальная посл-ть повторяющихся символов 2: ";
    str2.printLongestSequence();
    cout << "Длина строки 1: " << str1.length() << endl;
    cout << "Длина строки 2: " << str2.length() << endl;
    cout << "Строки равны? " << (str1.isEqual(str2) ? "Да" : "Нет") << endl;
    cout << "1 строка пустая? " << (!str1 ? "Нет" : "Да") << endl;
    cout << "2 строка пустая " << (!str2 ? "Нет" : "Да") << endl;
    cout << "Объединение строк: " << (str1 + str2).length() << endl;
    return 0;
}
