 Создать класс для работы со строками. Разработать следующие члены класса: поле string line, функции, позволяющие посчитать количество цифр
в строке, вывести на экран все символы в строке, встречающиеся в ней только 1 раз, вывести на экран самую длинную последовательность повторяющихся символов в строке,
узнать общее количество символов в строке, сравнить 2 строки на равенство.  Кроме того, реализовать перегрузку операции унарный !, которая возвращает значение True, 
если строка не пустая, иначе False, операцию +, которая позволяет реализовать операцию слияния двух строк
#include <iostream>
#include <string>
#include <cmath>
using namespace std;
class String {
private:
	string line;
	static int count;
public:
	// Функция подсчета количества цифр в строке
	int CountDigit() {
		int k = 0;
		for (char c : line) { //перебираем каждый символ в строке
			if (isdigit(c))
				k++;
		}
		return k;
	}
	// Функция для вывода только тех букв,которые встречаются только один раз
	void sumb(const string& str) {
		int charCount[256] = { 0 };
		for (char c : str) {
			charCount[(int)c]++;
		}
		for (char c : str) {
			if (charCount[(int)c] == 1) {
				cout << c;
				charCount[(int)c] = 0;
			}
		}
	}
	// Функция для вывода на экран самой длинной последовательности повторяющихся символов в строке
	void maxi() {
		int maxLength = 0, currentLength = 1; //максимальная и текущая длина последовательности
		char maxChar = line[0], currentChar = line[0]; //символ с максимальной длиной и текущий символ
		for (int i = 1; i < line.length(); i++) {
			if (line[i] == line[i - 1]) {
				currentLength++;
				currentChar = line[i];
			}
			else {
				if (currentLength > maxLength) {
					maxLength = currentLength;
					maxChar = currentChar;
				}
				currentLength = 1;
			}
		}
		if (currentLength > maxLength) {
			maxLength = currentLength;
			maxChar = currentChar;
		}
		cout << "Самая длинная последовательность: ";
		for (int i = 0; i < maxLength; i++) {
			cout << maxChar;
		}
		cout << endl;
	}
	// Метод для получения общего количества символов в строке
	int length() {
		return line.length();
	}
	// Метод для сравнения двух строк на равенство
	bool rav(String other) {
		return line == other.line;
	}
	// Перегрузка операции унарный !
	bool operator!() {
		return line.empty();
	}
	String operator+(String other) {
		return line+other.line;
	}
};
int String::count = 0;
