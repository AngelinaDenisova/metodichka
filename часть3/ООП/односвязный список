//Создать список из целых чисел, удалить лишние элементы так, чтобы в результирующем каждый элемент был не меньше среднего арифметического всех элементов, 
//следующих за ним
#include <iostream>
#include <fstream>
using namespace std;

// Описание структуры элемента списка
struct Node {
    int data;
    Node* next;
};

// Функция удаления элемента из списка
void deleteNode(Node** head_ref, Node* del_node) { //принимает указатель на голову списка и на эл-т который надо удалить
    // Если удаляемый элемент - первый элемент списка
    if (*head_ref == del_node) {
        *head_ref = del_node->next; //указатель перемещается на следующий элемент после удаляемого
        delete del_node; //очищается память
        return;
    }

    // Найти предыдущий элемент удаляемого элемента
    Node* prev_node = *head_ref;
    while (prev_node->next != nullptr && prev_node->next != del_node) { //проходим по списку, пока не найдем элемент, ссылающийся на удаляемый
        prev_node = prev_node->next;
    }

    // Перестроение списка и удаление элемента
    if (prev_node->next != nullptr) {
        prev_node->next = del_node->next;
        delete del_node;
    }
}

// Функция создания нового узла списка
Node* newNode(int data) { //принимает целочисленное поле data
    Node* new_node = new Node(); //выделяет память для нового узла
    new_node->data = data; // в поле data устанавливается переданное значение
    new_node->next = nullptr; //в поле next - nullptr
    return new_node; //возвращаем указатель на новый узел списка
}

// Функция для добавления элемента в конец списка
void push(Node** head_ref, int new_data) { //принимает указатель на голову списка и новое значение, которое нужно добавить
    Node* new_node = newNode(new_data); //создаем новый узел и сохраняем указатель на него в mew_node
    if (*head_ref == nullptr) { //если список пустой
        *head_ref = new_node; //то указатель на новый узел - это голова списка
        return;
    }
    Node* last = *head_ref;
    while (last->next != nullptr) { //проходим по списку, чтобы найти последний элемент
        last = last->next;
    }
    last->next = new_node; //добавляем узел в конец
}

// Функция вывода списка на экран
void printList(Node* node) {
    while (node != NULL) {
        cout << node->data << " ";
        node = node->next;
    }
}

// Функция удаления элементов из списка
void deleteExtraNodes(Node** head_ref) {
    // Если список пустой, то выход из функции
    if (*head_ref == NULL) {
        return;
    }

    // Найти среднее арифметическое всех элементов списка
    int sum = 0;
    int count = 0;
    Node* current = *head_ref;
    while (current != nullptr) {
        sum += current->data;
        count++;
        current = current->next;
    }
    float average = (float)sum / count;

    // Удаление элементов, которые меньше среднего арифметического всех элементов, следующих за ним
    current = *head_ref;
    Node* prev_node = nullptr;
    while (current != nullptr && current->next != nullptr) {
        if (current->data < average) {
            Node* del_node = current;
            // Если удаляемый элемент не первый, то нужно предыдущий узел указать на следующий узел после удаляемого
            if (prev_node != nullptr) {
                prev_node->next = current->next;
                current = prev_node->next;
            }
            // Если удаляемый элемент первый, то головной элемент переназначается на следующий
            else {
                *head_ref = current->next;
                current = *head_ref;
            }
            deleteNode(head_ref, del_node);
        }
        else {
            prev_node = current;
            current = current->next;
        }
    }
}

int main() {
    // Считывание данных из файла и добавление элементов в список
    ifstream file("input.txt");
    if (!file) {
        cout << "Ошибка при открытии файла!" << endl;
        return 1;
    }
    Node* head = nullptr;
    int num;
    while (file >> num) {
        push(&head, num);
    }
    file.close();

    cout << "Исходный список: ";
    printList(head);

    deleteExtraNodes(&head);

    cout << "\nСписок после удаления: ";
    printList(head);

    return 0;
}
